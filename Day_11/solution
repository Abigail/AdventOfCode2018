#!/opt/perl/bin/perl

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use List::Util 'min';

use experimental 'signatures';

my $min_X  =   1;
my $max_X  = 300;
my $min_Y  =   1;
my $max_Y  = 300;

my @X      = ($min_X .. $max_X);
my @Y      = ($min_Y .. $max_Y);

my $SERIAL = 1133;


#
# Calculate the power level of each fuel cell
#
my $grid;
foreach my $x (@X) {
    my $rack_id = $x + 10;
    foreach my $y (@Y) {
        $$grid [$x] [$y] =
          int ((($y * $rack_id + $SERIAL) * $rack_id) / 100) % 10 - 5;
    }
}

my $partial_sums;
$$partial_sums [$_] [0] = 0 for 0, @X;
$$partial_sums [0] [$_] = 0 for 0, @Y;
foreach my $x (@X) {
    foreach my $y (@Y) {
        #
        # Values where $x == 0 or $y == 0 are undefined.
        # Perl will treat them as 0 (which is what we want),
        # but it'll warn, if no shut up.
        #
        $$partial_sums [$x] [$y] =
             $$grid [$x] [$y] +
             $$partial_sums [$x - 1] [$y] +
             $$partial_sums [$x] [$y - 1] -
             $$partial_sums [$x - 1] [$y - 1];
    }
}

#
# Find the best 3x3 and NxN squares.
#
my ($max_x,  $max_y,  $max_sum, $max_size) = (0, 0, 0, 0);
my ($max_x3, $max_y3, $max_sum3)           = (0, 0, 0);
foreach my $x (@X) {
    foreach my $y (@Y) {
        my $size_limit = min ($max_X - $x + 1, $max_Y - $y + 1);
        foreach my $size (1 .. $size_limit) {
            my $d = $size - 1;
            my $sum = $$partial_sums [$x + $d] [$y + $d] -
                      $$partial_sums [$x + $d] [$y - 1]  -
                      $$partial_sums [$x - 1]  [$y + $d] +
                      $$partial_sums [$x - 1]  [$y - 1];
            if ($sum > $max_sum) {
                ($max_x, $max_y, $max_size) = ($x, $y, $size);
                $max_sum = $sum;
            }
            if ($size == 3 && $sum > $max_sum3) {
                ($max_x3, $max_y3) = ($x, $y);
                $max_sum3 = $sum;
            }
        }
    }
}

say "Part 1: $max_x3, $max_y3";
say "Part 2: $max_x, $max_y, $max_size";


__END__
