#!/opt/perl/bin/perl

use 5.028;

use strict;
use warnings;
no  warnings 'syntax';

use List::Util 'min';

use experimental 'signatures';
use experimental 'lexical_subs';

my $min_X  =   1;
my $max_X  = 300;
my $min_Y  =   1;
my $max_Y  = 300;

my @X      = ($min_X .. $max_X);
my @Y      = ($min_Y .. $max_Y);

my $SERIAL = 1133;


#
# Calculate the power level of each fuel cell
#
my $grid;
foreach my $x (@X) {
    my $rack_id = $x + 10;
    foreach my $y (@Y) {
        $$grid [$x] [$y] =
          int ((($y * $rack_id + $SERIAL) * $rack_id) / 100) % 10 - 5;
    }
}


#
# Keep track of the maximum total power, both for any 3x3 square,
# and for any possible square.
#
my ($max_sum3, $max_x3, $max_y3)             = (0, 0, 0);
my ($max_sum,  $max_x,  $max_y,  $max_size)  = (0, 0, 0, 0);
foreach my $x (@X) {
    foreach my $y (@Y) {
        my $size_limit = min ($max_X - $x + 1, $max_Y - $y + 1);

        my $sum = 0;

        #
        # Calculate the sum for each possible square with a
        # given top-left position. We start withe the smallest
        # possible square (1x1), and increase the size. Note 
        # that for each next larger square, we only need to
        # add the power of the fuel cells on two of the edges.
        #
        foreach my $square_size (1 .. $size_limit) {
            foreach my $d (0 .. $square_size - 2) {
                $sum += $$grid [$x + $d] [$y + $square_size - 1];
                $sum += $$grid [$x + $square_size - 1] [$y + $d];
            }
            $sum += $$grid [$x + $square_size - 1] [$y + $square_size - 1];

            if ($sum > $max_sum) {
                $max_sum = $sum;
                ($max_x, $max_y) = ($x, $y);
                $max_size = $square_size;
            }
            if ($square_size == 3) {
                if ($sum > $max_sum3) {
                    $max_sum3 = $sum;
                    ($max_x3, $max_y3) = ($x, $y);
                }
            }
        }
    }
}

say "Part 1: $max_x3, $max_y3";
say "Part 2: $max_x, $max_y, $max_size";

__END__
